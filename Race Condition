class Counter
{
    int count;
    public synchronized void increment()
    // here we need to use synchronized. If we use sychronized then one thread will work in one time,  otherwise two threads may work in the same time and at that time increment() will be called 2 times but increment will occur for once and for that reason we will loss data.
    {
        count++;
    }
}
class Demo {
    public static void main(String[] args) throws InterruptedException  {
        Counter c = new Counter();
        Runnable obj1 =()->{
        for(int i=1; i<=1000; i++)
        {
           c.increment();
        }
      };
        Runnable obj2 = ()->{
        for(int i=1; i<=1000; i++)
        {
            c.increment();
        }
      };
        
        Thread t1= new Thread(obj1);
        Thread t2= new Thread(obj2);
        
        t1.start();    
        t2.start();
        
        t1.join();
        t2.join();
        // join() is a special method which allows your main thread to wait for another 2 threads to come back and join.
        //join may throw exception, so added throws InterruptedException in the main()
        
        System.out.println(c.count);
    }
}
